
// Issues: glitchy stop bit clock in post-synthesis simulation
// add clock wizard and ila as IP catalog
`timescale 1ns / 1ps

module Design(
                   input wire clk125MHz,
                   input wire rst_n,
                   input wire enable,
                
                   output wire [7:0] data_outt,
//                   output wire [8:0] temp_deci,
//                   output wire serial_out,

//                   output wire ready,
//                   output reg [7:0] state,
                
                    inout wire i2c_sda,
                   output wire i2c_scl
//                   output wire i2c_clk_out
                  );

    // basic connection establishment states
localparam IDLE            = 0;
localparam START           = 1;
localparam SEND_SLV_ADDR   = 2;
localparam RW_BIT_WRITE    = 3;
localparam ACK_SLV         = 4;
localparam SEND_POINTER         = 5;
localparam ACK_REG         = 6;
localparam REG_LSB         = 7;
localparam R_RESTART       = 8;
localparam SEND_SLV_RD     = 9;
localparam RW_BIT_READ     = 10;
localparam ACK_SLV_RD      = 11;
localparam READ_MSB        = 12;
localparam ACK_RD_MSB      = 13;
localparam READ_LSB        = 14;
localparam NACK            = 15;
localparam STOP            = 16;
	
	// 
	localparam DIVIDE_BY = 1000;

    //	reg [7:0] state;
    reg [15:0] counter2 = 0;
    reg i2c_clk = 1;
    reg i2c_scl_enable = 0;
    reg write_enable = 1;
    reg sda_out = 1;
    wire sda_in;
    reg [7:0] counter = 0;
    reg [6:0] slv_address = slv_addr;
    reg [7:0] reg_address = reg_addr;
    wire  i2c_stop_to_idle_detect;
    reg [7:0] previous_state = 0;
    reg [7:0] rp_counter = 0;
    reg [7:0] nk_counter = 0;
    reg [7:0] ccounter;
    reg reg1;
    reg [15:0] data_out;
    reg [7:0] state;
    reg temp_read_done;
    reg [8:0] temp_deci_reg;
    reg [8:0] temp_deci;
    
  clk_wiz_0 instance_name
   (
    // Clock out ports
    .clk_out1(clk),     // output clk_out1
   // Clock in ports
    .clk_in1(clk125MHz));      // input clk_in1
    
ila_0 your_instance_name (
	.clk(clk), // input wire clk
	.probe0(data_outt), // input wire [15:0] probe0
	.probe1(serial_out) // input wire [8:0]  probe1
);
    
    parameter [6:0] slv_addr = 7'b1001000;
    parameter [7:0] reg_addr = 8'b00000000;
    
    assign data_outt[7:0] = data_out[15:8]; 
//    assign temp_deci = temp_deci_reg;
assign i2c_scl = ((state == R_RESTART && rp_counter == 0) || (state == IDLE) || (i2c_stop_to_idle_detect)) ? 1 : (i2c_scl_enable ? i2c_clk : 1);
	assign i2c_stop_to_idle_detect = ((reg1 == 1) && (state == 16));

	
	// ========================================= Clock prescale =========================================
	always @ (posedge clk) 
	begin
		if (counter2 == (DIVIDE_BY/2) - 1) 
		begin
			i2c_clk  <= ~i2c_clk;
			counter2 <= 0;
		end
		else 
		    counter2 <= counter2 + 1;
	end 

    // ====================================== i2c posedge FSM ====================================== 
    always @(posedge i2c_clk, negedge rst_n)
    begin
        if(!rst_n)
        begin
            previous_state <= 8'd0;
        end
        else
        begin
            previous_state <= state;  
        end
    end
    
    // ====================================== i2c posedge FSM ====================================== 
    always @(posedge i2c_clk, negedge rst_n) 
    begin
        if(!rst_n)
        begin
             state <= IDLE;
            data_out <= 0;
            counter <= 0;
            rp_counter <= 0;
            nk_counter <= 0;
            reg1 <= 0;
//            temp <= 0;
//            temp_decimal <= 0;
            temp_read_done <=0;
        end
        else
        begin
            case(state)
          IDLE: begin
                if (enable) begin
                    state <= IDLE;
//                    data_out <= 0;
                    counter <= 0;
                    rp_counter <= 0;
                    nk_counter <= 0;
                    reg1 <= 0;
//                     temp <= 0;
                    state <= START;
//                      temp_decimal <= 0;
                      temp_read_done <=0;
                end
            end

            START: begin
                counter <= 6;
                state <= SEND_SLV_ADDR;
            end

            SEND_SLV_ADDR: begin
                if (counter == 0)
                    state <= RW_BIT_WRITE;
                else
                    counter <= counter - 1;
            end

            RW_BIT_WRITE: begin
                state <= ACK_SLV;
            end

            ACK_SLV: begin
                counter <= 7;
                data_out <= 0;
                state <= SEND_POINTER;
            end

            SEND_POINTER: begin
                if (counter == 0)
                    state <= ACK_REG;
                else
                    counter <= counter - 1;
            end

            ACK_REG: begin
                counter <= 7;
                state <= R_RESTART;
                rp_counter <= 1'b1;
            end

//            REG_LSB: begin
//                if (counter == 0)
//                    state <= R_RESTART;
//                else
//                    counter <= counter - 1;
//            end

            R_RESTART: begin
                if (rp_counter == 0) begin
                    counter <= 6;
                    state <= SEND_SLV_RD;
                end else begin
                    rp_counter <= rp_counter - 1;
                end
            end

            SEND_SLV_RD: begin
                if (counter == 0)
                    state <= RW_BIT_READ;
                else
                    counter <= counter - 1;
            end

            RW_BIT_READ: begin
                state <= ACK_SLV_RD;
            end

            ACK_SLV_RD: begin
                counter <= 15;
                state <= READ_MSB;
            end

            READ_MSB: begin
                data_out[counter] <= sda_in;
                if (counter == 8)
                    state <= ACK_RD_MSB;
                else
                    counter <= counter - 1;
            end

            ACK_RD_MSB: begin
                counter <= 7;
                state <= READ_LSB;
            end

            READ_LSB: begin
                data_out[counter] <= sda_in;
                if (counter == 0) begin
                    state <= NACK;
                    nk_counter <= 0;
                end else begin
                    counter <= counter - 1;
                end
            end

            NACK: begin
                if (nk_counter == 0) begin
                    state <= STOP;
                    ccounter <= 7'b0000001;
//                    reg1 <= 1'b1;
                    end
                else begin
                    nk_counter <= nk_counter - 1;
            end
            end

            STOP: begin
             if (ccounter == 0) begin
                    state <= IDLE;
                    reg1 <= 1'b1;
                end else 
                 begin
                    ccounter <= ccounter - 1;
                    reg1 <= 1;
                end
//                state <= IDLE;
            end
            
            endcase
        end
    end
    
    // ====================================== i2c negedge FSM ====================================== 
    always @(negedge i2c_clk, negedge rst_n) 
    begin
        if (!rst_n) begin
        write_enable <= 1;
        sda_out <= 1;
        i2c_scl_enable <= 0;
    end else begin
        case (state)
            IDLE: begin
                i2c_scl_enable <= 0;
                sda_out <= 1;
            end

            START: begin
                write_enable <= 1;
                sda_out <= 0;
                i2c_scl_enable <= 0;
            end

            SEND_SLV_ADDR: begin
                sda_out <= slv_address[counter];
                i2c_scl_enable <= 1;
            end

            RW_BIT_WRITE: begin
                sda_out <= 0;
                i2c_scl_enable <= 1;
            end

            ACK_SLV: begin
                write_enable <= 0;
                i2c_scl_enable <= 1;
            end

            SEND_POINTER: begin  //REG_MSB
                write_enable <= 1;
                sda_out <= reg_address[7 - counter];
                i2c_scl_enable <= 1;
            end

            ACK_REG: begin
                write_enable <= 0;
                i2c_scl_enable <= 1;
            end

//            REG_LSB: begin
//                write_enable <= 1;
//                sda_out <= reg_address[7 - counter];
//                i2c_scl_enable <= 1;
//            end

            R_RESTART: 
            begin 
             if(rp_counter == 1)
                begin
                    write_enable <= 1;
                    sda_out <= 1;                
                end
                else if(rp_counter == 0)
                begin   
                    write_enable <= 1;
                    sda_out <= 0;
                    i2c_scl_enable <= 0;
                end  
                end      

            SEND_SLV_RD: begin
                sda_out <= slv_address[counter];
                i2c_scl_enable <= 1;
            end

            RW_BIT_READ: begin
                sda_out <= 1;
                i2c_scl_enable <= 1;
//                   write_enable <= 0; //28_june_edit
            end

            ACK_SLV_RD: begin
                write_enable <= 0;
                i2c_scl_enable <= 1;
            end

            READ_MSB, READ_LSB: begin
                write_enable <= 0;
                i2c_scl_enable <= 1;
            end

            ACK_RD_MSB: begin
                write_enable <= 1;
                sda_out <= 0;
                i2c_scl_enable <= 1;
            end

            NACK: begin
                write_enable <= 1; 
                sda_out <= 1;
                i2c_scl_enable <= 1;
            end

            STOP: begin
               if(ccounter == 1)
                begin
                    write_enable <= 1;
                    sda_out <= 0;    
                    i2c_scl_enable <= 1;            
                end
                else if(ccounter == 0)
                begin   
                    write_enable <= 1;
                    sda_out <= 1;
                    i2c_scl_enable <= 1;
                end  
            end

            endcase
        end
    end


    IOBUF sda_iobuf (
    .I(sda_out), 
    .O(sda_in),   
    .T(~write_enable), // Tri-state control (0=drive, 1=high-Z)
    .IO(i2c_sda)   
    );


endmodule
